<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>
<!-- <configuration debug="true" scan="true" scanPeriod="1 seconds"> -->
<configuration debug="true">

    <property name="LOG_FILE_NAME" value="demo.log" />

    <property name="LOG_DIR" value="/demo/logs"/>
    <property name="LOG_FILE_PATH" value="${LOG_DIR}/${LOG_FILE_NAME}"/>

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger{36}.%method\(%line\) === %msg%n</pattern>
		</encoder>
	</appender>
	
	<appender name="FILE"
        class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_FILE_PATH}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${LOG_FILE_PATH}.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- keep 30 days' worth of history -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger.%method\(%line\) === %msg%n
            </pattern>
        </encoder>
    </appender>

	<logger name="org.springframework" level="INFO" />
	<logger name="org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor" level="ERROR" />
	<logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" level="ERROR" />
	
    <!-- log SQL with timing information, post execution -->
<!--    <logger name="jdbc.sqltiming" additivity="false">-->
<!--        <level value="error" />-->
<!--        <appender-ref ref="STDOUT" />-->
<!--    </logger>-->
<!-- -->
<!--    <logger name="jdbc.audit" additivity="false">-->
<!--        <level value="WARN" />-->
<!--        <appender-ref ref="STDOUT" />-->
<!--    </logger>-->
<!--    -->
<!--    <logger name="jdbc.resultset" additivity="false">-->
<!--        <level value="WARN" />-->
<!--        <appender-ref ref="STDOUT" />-->
<!--    </logger>-->
<!--    -->
<!--    <logger name="java.sql" additivity="false">-->
<!--        <level value="WARN"/> -->
<!--        <appender-ref ref="STDOUT"/> -->
<!--    </logger>-->
    <logger name="jdbc.sqlonly" level="OFF"/>
    <logger name="jdbc.sqltiming" level="INFO"/>
    <logger name="jdbc.audit" level="OFF"/>
    <logger name="jdbc.resultset" level="OFF"/>
    <logger name="jdbc.resultsettable" level="OFF"/>
    <logger name="jdbc.connection" level="ERROR"/>
    <!--
    * jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다.
    * jdbc.sqltiming : SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.
    * jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.
    * jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다.
    * jdbc.resultsettable : SQL 결과 조회된 데이터의 table을 로그로 남긴다.
    -->

<!--    <logger name="com.zaxxer.hikari" additivity="false">-->
<!--        <level value="DEBUG" />-->
<!--        <appender-ref ref="FILE" />-->
<!--    </logger>-->
    
    <logger name="kr.co.ecoletree">
		<level value="info" />
	</logger>

	<logger name="org.apache">
		<level value="info" />
	</logger>

	<logger name="org.mybatis" additivity="false">
        <level value="ERROR"/>
        <appender-ref ref="STDOUT"/>
    </logger>

	<logger name="kr.co.ecoletree" additivity="false">
        <level value="INFO"/> 
        <appender-ref ref="STDOUT"/> 
        <appender-ref ref="FILE" />
    </logger>

	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</root>

</configuration>